name: Build and Deploy with Secrets

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Secret 파일 생성 (src/main/resources/)
      - name: Create application-secret-prod.properties
        run: |
          echo "${{ secrets.SECRET_PROPERTIES }}" > src/main/resources/application-secret.properties

      # 3. Gradle Wrapper 실행 권한 부여
      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x ./gradlew

      # 4. Spring Boot 애플리케이션 빌드 (테스트 제외)
      - name: Build Spring Boot Application
        run: ./gradlew clean build -x test -Dspring.profiles.active=prod

      # 5. Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 6. Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker Image
        run: |
          docker build -t dnghkm/unite-app:latest .
          docker push dnghkm/unite-app:latest

      # 7. EC2에 `docker-compose.unite.yml` 파일 전송
      - name: Deploy docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          port: ${{ secrets.SERVER_PORT }}
          key: ${{ secrets.SERVER_KEY }}
          source: docker-compose.yml
          target: /home/kdh/docker/unite
          debug: true

      # 8. EC2에서 `docker-compose` 실행 (app 컨테이너만 재시작)
      - name: Run Docker Compose on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          port: ${{ secrets.SERVER_PORT }}
          key: ${{ secrets.SERVER_KEY }}
          script: |
            cd /home/kdh/docker/unite
            docker compose pull app
            docker compose up -d app
            docker image prune -af
